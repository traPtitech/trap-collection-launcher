/* tslint:disable */
/* eslint-disable */
/**
 * traP Collection v2
 * traP Collection v2
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * エディションです。 questionnaireは工大祭などのアンケートが必要な際のみ存在します。
 * @export
 * @interface Edition
 */
export interface Edition {
  /**
   * エディションのIDです。
   * @type {string}
   * @memberof Edition
   */
  id: string;
  /**
   * エディション名です。
   * @type {string}
   * @memberof Edition
   */
  name: string;
  /**
   * エディションのアンケートのURLです。
   * @type {string}
   * @memberof Edition
   */
  questionnaire?: string;
  /**
   * エディションが作成された時刻です。
   * @type {string}
   * @memberof Edition
   */
  createdAt: string;
}
/**
 *
 * @export
 * @interface EditionAccessToken
 */
export interface EditionAccessToken {
  /**
   * アクセストークンです。 暗号的にランダムな英数字36文字です。
   * @type {string}
   * @memberof EditionAccessToken
   */
  accessToken: string;
  /**
   * アクセストークンの有効期限です。
   * @type {string}
   * @memberof EditionAccessToken
   */
  expiresAt: string;
}
/**
 * ランチャーのエディション情報取得認可のリクエストです。
 * @export
 * @interface EditionAuthorizeRequest
 */
export interface EditionAuthorizeRequest {
  /**
   * プロダクトキーの値です。 暗号的にランダムな英数字5文字をハイフン区切りで5つ並べたものです。
   * @type {string}
   * @memberof EditionAuthorizeRequest
   */
  key: string;
}
/**
 * エディションに紐づけられた ゲームとバージョンの情報です。
 * @export
 * @interface EditionGameResponse
 */
export interface EditionGameResponse {
  /**
   * ゲームのIDです。
   * @type {string}
   * @memberof EditionGameResponse
   */
  id: string;
  /**
   * ゲームの名前です。
   * @type {string}
   * @memberof EditionGameResponse
   */
  name: string;
  /**
   * ゲームの説明です。 ランチャーでも表示されます。
   * @type {string}
   * @memberof EditionGameResponse
   */
  description: string;
  /**
   * ゲームがtraP Collectionに追加された時刻です。
   * @type {string}
   * @memberof EditionGameResponse
   */
  createdAt: string;
  /**
   *
   * @type {GameVersion}
   * @memberof EditionGameResponse
   */
  version: GameVersion;
}
/**
 *
 * @export
 * @interface EditionGameResponseAllOf
 */
export interface EditionGameResponseAllOf {
  /**
   *
   * @type {GameVersion}
   * @memberof EditionGameResponseAllOf
   */
  version: GameVersion;
}
/**
 * ゲームの情報です。
 * @export
 * @interface Game
 */
export interface Game {
  /**
   * ゲームのIDです。
   * @type {string}
   * @memberof Game
   */
  id: string;
  /**
   * ゲームの名前です。
   * @type {string}
   * @memberof Game
   */
  name: string;
  /**
   * ゲームの説明です。 ランチャーでも表示されます。
   * @type {string}
   * @memberof Game
   */
  description: string;
  /**
   * ゲームのownerの一覧です。
   * @type {Array<string>}
   * @memberof Game
   */
  owners: Array<string>;
  /**
   * ゲームのmaintainerの一覧です。 maintainerがいない場合、このフィールドは存在しません。
   * @type {Array<string>}
   * @memberof Game
   */
  maintainers?: Array<string>;
  /**
   * ゲームがtraP Collectionに追加された時刻です。
   * @type {string}
   * @memberof Game
   */
  createdAt: string;
}
/**
 * ゲームのファイルのメタ情報です。
 * @export
 * @interface GameFile
 */
export interface GameFile {
  /**
   * ゲームファイルのIDです。
   * @type {string}
   * @memberof GameFile
   */
  id: string;
  /**
   *
   * @type {GameFileType}
   * @memberof GameFile
   */
  type: GameFileType;
  /**
   * ゲームファイルのmd5ハッシュ値です。
   * @type {string}
   * @memberof GameFile
   */
  md5: string;
  /**
   * ゲームファイルの解凍後の実行ファイルのパスです。
   * @type {string}
   * @memberof GameFile
   */
  entryPoint: string;
  /**
   * ゲームファイルが作成された時刻です。
   * @type {string}
   * @memberof GameFile
   */
  createdAt: string;
}
/**
 * ゲームファイルのタイプです。 jarはJavaで起動しWindows、OSXの両方で実行できるもの、 windowsはWindows用の実行ファイル、 macはOSX用の実行ファイルです。
 * @export
 * @enum {string}
 */
export enum GameFileType {
  Jar = 'jar',
  Win32 = 'win32',
  Darwin = 'darwin',
}

/**
 * ゲームの画像のメタ情報です。
 * @export
 * @interface GameImage
 */
export interface GameImage {
  /**
   * ゲーム画像のIDです。
   * @type {string}
   * @memberof GameImage
   */
  id: string;
  /**
   *
   * @type {GameImageMime}
   * @memberof GameImage
   */
  mime: GameImageMime;
  /**
   * ゲーム画像の作成時刻です。
   * @type {string}
   * @memberof GameImage
   */
  createdAt: string;
}
/**
 * ゲーム画像のmimeです。
 * @export
 * @enum {string}
 */
export enum GameImageMime {
  Jpeg = 'image/jpeg',
  Png = 'image/png',
  Gif = 'image/gif',
}

/**
 * ゲームの情報です。
 * @export
 * @interface GameInfo
 */
export interface GameInfo {
  /**
   * ゲームのIDです。
   * @type {string}
   * @memberof GameInfo
   */
  id: string;
  /**
   * ゲームの名前です。
   * @type {string}
   * @memberof GameInfo
   */
  name: string;
  /**
   * ゲームの説明です。 ランチャーでも表示されます。
   * @type {string}
   * @memberof GameInfo
   */
  description: string;
  /**
   * ゲームがtraP Collectionに追加された時刻です。
   * @type {string}
   * @memberof GameInfo
   */
  createdAt: string;
}
/**
 * ゲームのロールを指定するリクエストです。
 * @export
 * @interface GameRoleRequest
 */
export interface GameRoleRequest {
  /**
   * ユーザーのIDです。 traQのユーザーのUUIDと対応します。
   * @type {string}
   * @memberof GameRoleRequest
   */
  id: string;
  /**
   *
   * @type {GameRoleType}
   * @memberof GameRoleRequest
   */
  type?: GameRoleType;
}
/**
 * ゲームの管理権限の種類です。 ownerはゲームの所有者で、ゲーム情報の変更や管理者の変更ができます。 maintainerはゲームのメンテナーで、ゲーム情報の変更のみできます。
 * @export
 * @enum {string}
 */
export enum GameRoleType {
  Owner = 'owner',
  Maintainer = 'maintainer',
}

/**
 * ゲームのバージョンです。 url、filesはゲームの種類に応じていずれかが存在します。
 * @export
 * @interface GameVersion
 */
export interface GameVersion {
  /**
   * ゲームのバージョンのIDです。
   * @type {string}
   * @memberof GameVersion
   */
  id: string;
  /**
   * ゲームのバージョン名です。 セマンティックバージョニングに沿った文字列が許容されます。
   * @type {string}
   * @memberof GameVersion
   */
  name: string;
  /**
   * ゲームのバージョンの説明です。 主にゲームの開発者向けの情報で、ランチャーでは表示されません。
   * @type {string}
   * @memberof GameVersion
   */
  description: string;
  /**
   * ゲームのURLの値です。
   * @type {string}
   * @memberof GameVersion
   */
  url?: string;
  /**
   *
   * @type {GameVersionFiles}
   * @memberof GameVersion
   */
  files?: GameVersionFiles;
  /**
   * ゲーム画像のIDです。
   * @type {string}
   * @memberof GameVersion
   */
  imageID: string;
  /**
   * ゲーム紹介動画のIDです。
   * @type {string}
   * @memberof GameVersion
   */
  videoID: string;
  /**
   * ゲームのバージョンが作成された時刻です。
   * @type {string}
   * @memberof GameVersion
   */
  createdAt: string;
}
/**
 * ゲームバージョンに紐づいたファイルの情報です。
 * @export
 * @interface GameVersionFiles
 */
export interface GameVersionFiles {
  /**
   * ゲームファイルのIDです。
   * @type {string}
   * @memberof GameVersionFiles
   */
  win32?: string;
  /**
   * ゲームファイルのIDです。
   * @type {string}
   * @memberof GameVersionFiles
   */
  darwin?: string;
  /**
   * ゲームファイルのIDです。
   * @type {string}
   * @memberof GameVersionFiles
   */
  jar?: string;
}
/**
 * ゲームの動画のメタ情報です。
 * @export
 * @interface GameVideo
 */
export interface GameVideo {
  /**
   * ゲーム紹介動画のIDです。
   * @type {string}
   * @memberof GameVideo
   */
  id: string;
  /**
   *
   * @type {GameVideoMime}
   * @memberof GameVideo
   */
  mime: GameVideoMime;
  /**
   * ゲーム紹介動画の作成時刻です。
   * @type {string}
   * @memberof GameVideo
   */
  createdAt: string;
}
/**
 * ゲーム紹介動画のmimeです。
 * @export
 * @enum {string}
 */
export enum GameVideoMime {
  VideoMp4 = 'video/mp4',
}

/**
 * ゲームバージョンの一覧を取得します。 ページングのために、limit、offsetを適用する前のゲームバージョンの数もnumで返しています。
 * @export
 * @interface GetGameVersionsResponse
 */
export interface GetGameVersionsResponse {
  /**
   * limit、offsetが適用される前のゲームバージョンの数です。
   * @type {number}
   * @memberof GetGameVersionsResponse
   */
  num: number;
  /**
   * limit、offsetが適用された後のゲームバージョンの一覧です。
   * @type {Array<GameVersion>}
   * @memberof GetGameVersionsResponse
   */
  versions: Array<GameVersion>;
}
/**
 * ゲームの一覧を取得します。 ページングのために、limit、offsetを適用する前のゲームの数をnumで返しています。
 * @export
 * @interface GetGamesResponse
 */
export interface GetGamesResponse {
  /**
   * limit、offsetが適用される前のゲームの数です。
   * @type {number}
   * @memberof GetGamesResponse
   */
  num: number;
  /**
   * limit、offsetが適用された後のゲームの一覧です。
   * @type {Array<GameInfo>}
   * @memberof GetGamesResponse
   */
  games: Array<GameInfo>;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
  /**
   *
   * @type {string}
   * @memberof ModelError
   */
  message: string;
}
/**
 * エディションを新しく作成する際に必要な情報です。 questionnaireは工大祭などのアンケートが必要な際のみ存在します。
 * @export
 * @interface NewEdition
 */
export interface NewEdition {
  /**
   * エディション名です。
   * @type {string}
   * @memberof NewEdition
   */
  name: string;
  /**
   * エディションのアンケートのURLです。
   * @type {string}
   * @memberof NewEdition
   */
  questionnaire?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof NewEdition
   */
  gameVersions: Array<string>;
}
/**
 * ゲームを新しく作成する際に必要な情報です。
 * @export
 * @interface NewGame
 */
export interface NewGame {
  /**
   * ゲームの名前です。
   * @type {string}
   * @memberof NewGame
   */
  name: string;
  /**
   * ゲームの説明です。 ランチャーでも表示されます。
   * @type {string}
   * @memberof NewGame
   */
  description: string;
  /**
   * ゲームのownerの一覧です。 指定されない場合、空配列として扱われます。 ゲームの作成を実行したユーザーは、このリストに含まれていなくてもownerとなります。 また、このリストにゲームの作成を実行したユーザーが含まれていた場合、 400エラーになります。
   * @type {Array<string>}
   * @memberof NewGame
   */
  owners?: Array<string>;
  /**
   * ゲームのmaintainerの一覧です。 指定されない場合、空配列として扱われます。 ゲームの作成を実行したユーザーを含むownerと重複するユーザーが存在した場合、 400エラーとなります。
   * @type {Array<string>}
   * @memberof NewGame
   */
  maintainers?: Array<string>;
}
/**
 * 新しいゲームのバージョンの作成に必要な情報です。 url、filesはゲームの種類に応じていずれかが存在します。
 * @export
 * @interface NewGameVersion
 */
export interface NewGameVersion {
  /**
   * ゲームのバージョン名です。 セマンティックバージョニングに沿った文字列が許容されます。
   * @type {string}
   * @memberof NewGameVersion
   */
  name: string;
  /**
   * ゲームのバージョンの説明です。 主にゲームの開発者向けの情報で、ランチャーでは表示されません。
   * @type {string}
   * @memberof NewGameVersion
   */
  description: string;
  /**
   * ゲームのURLの値です。
   * @type {string}
   * @memberof NewGameVersion
   */
  url?: string;
  /**
   *
   * @type {GameVersionFiles}
   * @memberof NewGameVersion
   */
  files?: GameVersionFiles;
  /**
   * ゲーム画像のIDです。
   * @type {string}
   * @memberof NewGameVersion
   */
  imageID: string;
  /**
   * ゲーム紹介動画のIDです。
   * @type {string}
   * @memberof NewGameVersion
   */
  videoID: string;
}
/**
 * エディションの情報を修正する際に必要な情報です。
 * @export
 * @interface PatchEdition
 */
export interface PatchEdition {
  /**
   * エディション名です。
   * @type {string}
   * @memberof PatchEdition
   */
  name: string;
  /**
   * エディションのアンケートのURLです。
   * @type {string}
   * @memberof PatchEdition
   */
  questionnaire?: string;
}
/**
 * エディションのゲームを変更するためのリクエストです。
 * @export
 * @interface PatchEditionGameRequest
 */
export interface PatchEditionGameRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof PatchEditionGameRequest
   */
  gameVersionIDs: Array<string>;
}
/**
 * ゲームの情報を修正する際に必要な情報です。
 * @export
 * @interface PatchGame
 */
export interface PatchGame {
  /**
   * ゲームの名前です。
   * @type {string}
   * @memberof PatchGame
   */
  name: string;
  /**
   * ゲームの説明です。 ランチャーでも表示されます。
   * @type {string}
   * @memberof PatchGame
   */
  description: string;
}
/**
 * 席の着席状態を変更するためのリクエストです。
 * @export
 * @interface PatchSeatStatusRequest
 */
export interface PatchSeatStatusRequest {
  /**
   *
   * @type {SeatStatus}
   * @memberof PatchSeatStatusRequest
   */
  status: SeatStatus;
}
/**
 * 席数を変更するためのリクエストです。
 * @export
 * @interface PostSeatRequest
 */
export interface PostSeatRequest {
  /**
   * 席数です。
   * @type {number}
   * @memberof PostSeatRequest
   */
  num: number;
}
/**
 *
 * @export
 * @interface ProductKey
 */
export interface ProductKey {
  /**
   * プロダクトキーのIDです。
   * @type {string}
   * @memberof ProductKey
   */
  id: string;
  /**
   * プロダクトキーの値です。 暗号的にランダムな英数字5文字をハイフン区切りで5つ並べたものです。
   * @type {string}
   * @memberof ProductKey
   */
  key: string;
  /**
   *
   * @type {ProductKeyStatus}
   * @memberof ProductKey
   */
  status: ProductKeyStatus;
  /**
   * プロダクトキーが作成された時刻です。
   * @type {string}
   * @memberof ProductKey
   */
  createdAt: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export enum ProductKeyStatus {
  Active = 'active',
  Revoked = 'revoked',
}

/**
 * 席の情報です。
 * @export
 * @interface Seat
 */
export interface Seat {
  /**
   * 席のIDです。
   * @type {number}
   * @memberof Seat
   */
  id: number;
  /**
   *
   * @type {SeatStatus}
   * @memberof Seat
   */
  status: SeatStatus;
}
/**
 * 席の状態です。 in-useは使用中、emptyは空席です。
 * @export
 * @enum {string}
 */
export enum SeatStatus {
  InUse = 'in-use',
  Empty = 'empty',
}

/**
 * ユーザー
 * @export
 * @interface User
 */
export interface User {
  /**
   * ユーザーのIDです。 traQのユーザーのUUIDと対応します。
   * @type {string}
   * @memberof User
   */
  id: string;
  /**
   * ユーザー名です。 traQのユーザーのUUIDでないmazreanなどのIDと対応します。
   * @type {string}
   * @memberof User
   */
  name: string;
}
/**
 * ユーザーを指定するリクエストです。
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
  /**
   * ユーザーのIDです。 traQのユーザーのUUIDと対応します。
   * @type {string}
   * @memberof UserRequest
   */
  id: string;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * traP Collection全体の管理者を削除します。 このAPIは管理者のみが利用できます。
     * @summary traP Collection全体の管理者削除
     * @param {string} userID ユーザーIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdmin: async (
      userID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userID' is not null or undefined
      assertParamExists('deleteAdmin', 'userID', userID);
      const localVarPath = `/admins/{userID}`.replace(
        `{${'userID'}}`,
        encodeURIComponent(String(userID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AdminAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * traP Collection全体の管理者の一覧を取得します。
     * @summary traPの管理者一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdmins: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/admins`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * traP Collection全体の管理者を追加します。 このAPIは管理者のみが利用できます。
     * @summary traP Collection全体の管理者追加
     * @param {UserRequest} [userRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAdmin: async (
      userRequest?: UserRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/admins`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AdminAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration);
  return {
    /**
     * traP Collection全体の管理者を削除します。 このAPIは管理者のみが利用できます。
     * @summary traP Collection全体の管理者削除
     * @param {string} userID ユーザーIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAdmin(
      userID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdmin(
        userID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * traP Collection全体の管理者の一覧を取得します。
     * @summary traPの管理者一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAdmins(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAdmins(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * traP Collection全体の管理者を追加します。 このAPIは管理者のみが利用できます。
     * @summary traP Collection全体の管理者追加
     * @param {UserRequest} [userRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postAdmin(
      userRequest?: UserRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postAdmin(
        userRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdminApiFp(configuration);
  return {
    /**
     * traP Collection全体の管理者を削除します。 このAPIは管理者のみが利用できます。
     * @summary traP Collection全体の管理者削除
     * @param {string} userID ユーザーIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdmin(userID: string, options?: any): AxiosPromise<Array<User>> {
      return localVarFp
        .deleteAdmin(userID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * traP Collection全体の管理者の一覧を取得します。
     * @summary traPの管理者一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdmins(options?: any): AxiosPromise<Array<User>> {
      return localVarFp
        .getAdmins(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * traP Collection全体の管理者を追加します。 このAPIは管理者のみが利用できます。
     * @summary traP Collection全体の管理者追加
     * @param {UserRequest} [userRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAdmin(
      userRequest?: UserRequest,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .postAdmin(userRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
  /**
   * traP Collection全体の管理者を削除します。 このAPIは管理者のみが利用できます。
   * @summary traP Collection全体の管理者削除
   * @param {string} userID ユーザーIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public deleteAdmin(userID: string, options?: any) {
    return AdminApiFp(this.configuration)
      .deleteAdmin(userID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * traP Collection全体の管理者の一覧を取得します。
   * @summary traPの管理者一覧取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getAdmins(options?: any) {
    return AdminApiFp(this.configuration)
      .getAdmins(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * traP Collection全体の管理者を追加します。 このAPIは管理者のみが利用できます。
   * @summary traP Collection全体の管理者追加
   * @param {UserRequest} [userRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public postAdmin(userRequest?: UserRequest, options?: any) {
    return AdminApiFp(this.configuration)
      .postAdmin(userRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * EditionApi - axios parameter creator
 * @export
 */
export const EditionApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 指定したエディションを削除します。
     * @summary エディションの削除
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEdition: async (
      editionID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'editionID' is not null or undefined
      assertParamExists('deleteEdition', 'editionID', editionID);
      const localVarPath = `/editions/{editionID}`.replace(
        `{${'editionID'}}`,
        encodeURIComponent(String(editionID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AdminAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したeditionIDのエディションのメタ情報を取得します。
     * @summary エディション情報の取得
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEdition: async (
      editionID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'editionID' is not null or undefined
      assertParamExists('getEdition', 'editionID', editionID);
      const localVarPath = `/editions/{editionID}`.replace(
        `{${'editionID'}}`,
        encodeURIComponent(String(editionID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * エディションに紐づくゲームの一覧を取得します。
     * @summary エディションに紐づくゲームの一覧の取得
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEditionGames: async (
      editionID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'editionID' is not null or undefined
      assertParamExists('getEditionGames', 'editionID', editionID);
      const localVarPath = `/editions/{editionID}/games`.replace(
        `{${'editionID'}}`,
        encodeURIComponent(String(editionID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication EditionIDAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * エディションの一覧を取得します。
     * @summary エディション一覧の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEditions: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/editions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したeditionIDのエディションの情報を変更します。
     * @summary エディション情報の変更
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {PatchEdition} [patchEdition]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEdition: async (
      editionID: string,
      patchEdition?: PatchEdition,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'editionID' is not null or undefined
      assertParamExists('patchEdition', 'editionID', editionID);
      const localVarPath = `/editions/{editionID}`.replace(
        `{${'editionID'}}`,
        encodeURIComponent(String(editionID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AdminAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchEdition,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * エディションを作成します。
     * @summary エディションの作成
     * @param {NewEdition} [newEdition]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEdition: async (
      newEdition?: NewEdition,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/editions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AdminAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        newEdition,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * エディションにゲームを追加します。
     * @summary エディションのゲームの変更
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {PatchEditionGameRequest} [patchEditionGameRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEditionGame: async (
      editionID: string,
      patchEditionGameRequest?: PatchEditionGameRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'editionID' is not null or undefined
      assertParamExists('postEditionGame', 'editionID', editionID);
      const localVarPath = `/editions/{editionID}/games`.replace(
        `{${'editionID'}}`,
        encodeURIComponent(String(editionID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AdminAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchEditionGameRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EditionApi - functional programming interface
 * @export
 */
export const EditionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EditionApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したエディションを削除します。
     * @summary エディションの削除
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteEdition(
      editionID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEdition(
        editionID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したeditionIDのエディションのメタ情報を取得します。
     * @summary エディション情報の取得
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEdition(
      editionID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Edition>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEdition(
        editionID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * エディションに紐づくゲームの一覧を取得します。
     * @summary エディションに紐づくゲームの一覧の取得
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEditionGames(
      editionID: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<EditionGameResponse>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEditionGames(
        editionID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * エディションの一覧を取得します。
     * @summary エディション一覧の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEditions(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Edition>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEditions(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したeditionIDのエディションの情報を変更します。
     * @summary エディション情報の変更
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {PatchEdition} [patchEdition]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchEdition(
      editionID: string,
      patchEdition?: PatchEdition,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Edition>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchEdition(
        editionID,
        patchEdition,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * エディションを作成します。
     * @summary エディションの作成
     * @param {NewEdition} [newEdition]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postEdition(
      newEdition?: NewEdition,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Edition>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postEdition(
        newEdition,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * エディションにゲームを追加します。
     * @summary エディションのゲームの変更
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {PatchEditionGameRequest} [patchEditionGameRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postEditionGame(
      editionID: string,
      patchEditionGameRequest?: PatchEditionGameRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<EditionGameResponse>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postEditionGame(
        editionID,
        patchEditionGameRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * EditionApi - factory interface
 * @export
 */
export const EditionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = EditionApiFp(configuration);
  return {
    /**
     * 指定したエディションを削除します。
     * @summary エディションの削除
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEdition(editionID: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteEdition(editionID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したeditionIDのエディションのメタ情報を取得します。
     * @summary エディション情報の取得
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEdition(editionID: string, options?: any): AxiosPromise<Edition> {
      return localVarFp
        .getEdition(editionID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * エディションに紐づくゲームの一覧を取得します。
     * @summary エディションに紐づくゲームの一覧の取得
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEditionGames(
      editionID: string,
      options?: any
    ): AxiosPromise<Array<EditionGameResponse>> {
      return localVarFp
        .getEditionGames(editionID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * エディションの一覧を取得します。
     * @summary エディション一覧の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEditions(options?: any): AxiosPromise<Array<Edition>> {
      return localVarFp
        .getEditions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したeditionIDのエディションの情報を変更します。
     * @summary エディション情報の変更
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {PatchEdition} [patchEdition]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEdition(
      editionID: string,
      patchEdition?: PatchEdition,
      options?: any
    ): AxiosPromise<Edition> {
      return localVarFp
        .patchEdition(editionID, patchEdition, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * エディションを作成します。
     * @summary エディションの作成
     * @param {NewEdition} [newEdition]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEdition(newEdition?: NewEdition, options?: any): AxiosPromise<Edition> {
      return localVarFp
        .postEdition(newEdition, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * エディションにゲームを追加します。
     * @summary エディションのゲームの変更
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {PatchEditionGameRequest} [patchEditionGameRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEditionGame(
      editionID: string,
      patchEditionGameRequest?: PatchEditionGameRequest,
      options?: any
    ): AxiosPromise<Array<EditionGameResponse>> {
      return localVarFp
        .postEditionGame(editionID, patchEditionGameRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * EditionApi - object-oriented interface
 * @export
 * @class EditionApi
 * @extends {BaseAPI}
 */
export class EditionApi extends BaseAPI {
  /**
   * 指定したエディションを削除します。
   * @summary エディションの削除
   * @param {string} editionID エディションのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionApi
   */
  public deleteEdition(editionID: string, options?: any) {
    return EditionApiFp(this.configuration)
      .deleteEdition(editionID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したeditionIDのエディションのメタ情報を取得します。
   * @summary エディション情報の取得
   * @param {string} editionID エディションのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionApi
   */
  public getEdition(editionID: string, options?: any) {
    return EditionApiFp(this.configuration)
      .getEdition(editionID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * エディションに紐づくゲームの一覧を取得します。
   * @summary エディションに紐づくゲームの一覧の取得
   * @param {string} editionID エディションのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionApi
   */
  public getEditionGames(editionID: string, options?: any) {
    return EditionApiFp(this.configuration)
      .getEditionGames(editionID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * エディションの一覧を取得します。
   * @summary エディション一覧の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionApi
   */
  public getEditions(options?: any) {
    return EditionApiFp(this.configuration)
      .getEditions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したeditionIDのエディションの情報を変更します。
   * @summary エディション情報の変更
   * @param {string} editionID エディションのIDを示すパスパラメータです。
   * @param {PatchEdition} [patchEdition]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionApi
   */
  public patchEdition(
    editionID: string,
    patchEdition?: PatchEdition,
    options?: any
  ) {
    return EditionApiFp(this.configuration)
      .patchEdition(editionID, patchEdition, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * エディションを作成します。
   * @summary エディションの作成
   * @param {NewEdition} [newEdition]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionApi
   */
  public postEdition(newEdition?: NewEdition, options?: any) {
    return EditionApiFp(this.configuration)
      .postEdition(newEdition, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * エディションにゲームを追加します。
   * @summary エディションのゲームの変更
   * @param {string} editionID エディションのIDを示すパスパラメータです。
   * @param {PatchEditionGameRequest} [patchEditionGameRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionApi
   */
  public postEditionGame(
    editionID: string,
    patchEditionGameRequest?: PatchEditionGameRequest,
    options?: any
  ) {
    return EditionApiFp(this.configuration)
      .postEditionGame(editionID, patchEditionGameRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * EditionAuthApi - axios parameter creator
 * @export
 */
export const EditionAuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * アクセストークンをもとにエディションの情報を取得します。
     * @summary エディション情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEditionInfo: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/editions/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication EditionAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * エディションに対するプロダクトキーの一覧を取得します。
     * @summary プロダクトキーの一覧の取得
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {ProductKeyStatus} [status] プロダクトキーのステータスを示すクエリパラメータです。 指定がない場合は全てのステータスのプロダクトキーが返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductKeys: async (
      editionID: string,
      status?: ProductKeyStatus,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'editionID' is not null or undefined
      assertParamExists('getProductKeys', 'editionID', editionID);
      const localVarPath = `/editions/{editionID}/keys`.replace(
        `{${'editionID'}}`,
        encodeURIComponent(String(editionID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AdminAuth required

      if (status !== undefined) {
        localVarQueryParameter['status'] = status;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * エディションに対するプロダクトキーを再有効化します。
     * @summary プロダクトキーの再有効化
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {string} productKeyID プロダクトキーのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postActivateProductKey: async (
      editionID: string,
      productKeyID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'editionID' is not null or undefined
      assertParamExists('postActivateProductKey', 'editionID', editionID);
      // verify required parameter 'productKeyID' is not null or undefined
      assertParamExists('postActivateProductKey', 'productKeyID', productKeyID);
      const localVarPath = `/editions/{editionID}/keys/{productKeyID}/activate`
        .replace(`{${'editionID'}}`, encodeURIComponent(String(editionID)))
        .replace(
          `{${'productKeyID'}}`,
          encodeURIComponent(String(productKeyID))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AdminAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ランチャーのエディション情報取得の認可リクエストを行います。 リクエストに成功すると、アクセストークンが返されます。 このアクセストークンを用いたBearer認証で、エディション情報取得用のAPIを利用することができます。
     * @summary ランチャーの認可リクエスト
     * @param {EditionAuthorizeRequest} editionAuthorizeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEditionAuthorize: async (
      editionAuthorizeRequest: EditionAuthorizeRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'editionAuthorizeRequest' is not null or undefined
      assertParamExists(
        'postEditionAuthorize',
        'editionAuthorizeRequest',
        editionAuthorizeRequest
      );
      const localVarPath = `/editions/authorize`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        editionAuthorizeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ランチャーからのエディション情報取得の認可用プロダクトキーを生成します。
     * @summary プロダクトキーの生成
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {number} num 生成するプロダクトキーの数を示すクエリパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductKey: async (
      editionID: string,
      num: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'editionID' is not null or undefined
      assertParamExists('postProductKey', 'editionID', editionID);
      // verify required parameter 'num' is not null or undefined
      assertParamExists('postProductKey', 'num', num);
      const localVarPath = `/editions/{editionID}/keys`.replace(
        `{${'editionID'}}`,
        encodeURIComponent(String(editionID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AdminAuth required

      if (num !== undefined) {
        localVarQueryParameter['num'] = num;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * エディションに対するプロダクトキーを失効(revoke)します。
     * @summary プロダクトキーの失効
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {string} productKeyID プロダクトキーのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postRevokeProductKey: async (
      editionID: string,
      productKeyID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'editionID' is not null or undefined
      assertParamExists('postRevokeProductKey', 'editionID', editionID);
      // verify required parameter 'productKeyID' is not null or undefined
      assertParamExists('postRevokeProductKey', 'productKeyID', productKeyID);
      const localVarPath = `/editions/{editionID}/keys/{productKeyID}/revoke`
        .replace(`{${'editionID'}}`, encodeURIComponent(String(editionID)))
        .replace(
          `{${'productKeyID'}}`,
          encodeURIComponent(String(productKeyID))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AdminAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EditionAuthApi - functional programming interface
 * @export
 */
export const EditionAuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    EditionAuthApiAxiosParamCreator(configuration);
  return {
    /**
     * アクセストークンをもとにエディションの情報を取得します。
     * @summary エディション情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEditionInfo(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Edition>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEditionInfo(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * エディションに対するプロダクトキーの一覧を取得します。
     * @summary プロダクトキーの一覧の取得
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {ProductKeyStatus} [status] プロダクトキーのステータスを示すクエリパラメータです。 指定がない場合は全てのステータスのプロダクトキーが返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProductKeys(
      editionID: string,
      status?: ProductKeyStatus,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ProductKey>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProductKeys(
        editionID,
        status,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * エディションに対するプロダクトキーを再有効化します。
     * @summary プロダクトキーの再有効化
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {string} productKeyID プロダクトキーのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postActivateProductKey(
      editionID: string,
      productKeyID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductKey>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postActivateProductKey(
          editionID,
          productKeyID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * ランチャーのエディション情報取得の認可リクエストを行います。 リクエストに成功すると、アクセストークンが返されます。 このアクセストークンを用いたBearer認証で、エディション情報取得用のAPIを利用することができます。
     * @summary ランチャーの認可リクエスト
     * @param {EditionAuthorizeRequest} editionAuthorizeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postEditionAuthorize(
      editionAuthorizeRequest: EditionAuthorizeRequest,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<EditionAccessToken>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postEditionAuthorize(
          editionAuthorizeRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * ランチャーからのエディション情報取得の認可用プロダクトキーを生成します。
     * @summary プロダクトキーの生成
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {number} num 生成するプロダクトキーの数を示すクエリパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postProductKey(
      editionID: string,
      num: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ProductKey>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postProductKey(
        editionID,
        num,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * エディションに対するプロダクトキーを失効(revoke)します。
     * @summary プロダクトキーの失効
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {string} productKeyID プロダクトキーのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postRevokeProductKey(
      editionID: string,
      productKeyID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductKey>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postRevokeProductKey(
          editionID,
          productKeyID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * EditionAuthApi - factory interface
 * @export
 */
export const EditionAuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = EditionAuthApiFp(configuration);
  return {
    /**
     * アクセストークンをもとにエディションの情報を取得します。
     * @summary エディション情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEditionInfo(options?: any): AxiosPromise<Edition> {
      return localVarFp
        .getEditionInfo(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * エディションに対するプロダクトキーの一覧を取得します。
     * @summary プロダクトキーの一覧の取得
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {ProductKeyStatus} [status] プロダクトキーのステータスを示すクエリパラメータです。 指定がない場合は全てのステータスのプロダクトキーが返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductKeys(
      editionID: string,
      status?: ProductKeyStatus,
      options?: any
    ): AxiosPromise<Array<ProductKey>> {
      return localVarFp
        .getProductKeys(editionID, status, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * エディションに対するプロダクトキーを再有効化します。
     * @summary プロダクトキーの再有効化
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {string} productKeyID プロダクトキーのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postActivateProductKey(
      editionID: string,
      productKeyID: string,
      options?: any
    ): AxiosPromise<ProductKey> {
      return localVarFp
        .postActivateProductKey(editionID, productKeyID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ランチャーのエディション情報取得の認可リクエストを行います。 リクエストに成功すると、アクセストークンが返されます。 このアクセストークンを用いたBearer認証で、エディション情報取得用のAPIを利用することができます。
     * @summary ランチャーの認可リクエスト
     * @param {EditionAuthorizeRequest} editionAuthorizeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postEditionAuthorize(
      editionAuthorizeRequest: EditionAuthorizeRequest,
      options?: any
    ): AxiosPromise<EditionAccessToken> {
      return localVarFp
        .postEditionAuthorize(editionAuthorizeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ランチャーからのエディション情報取得の認可用プロダクトキーを生成します。
     * @summary プロダクトキーの生成
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {number} num 生成するプロダクトキーの数を示すクエリパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductKey(
      editionID: string,
      num: number,
      options?: any
    ): AxiosPromise<Array<ProductKey>> {
      return localVarFp
        .postProductKey(editionID, num, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * エディションに対するプロダクトキーを失効(revoke)します。
     * @summary プロダクトキーの失効
     * @param {string} editionID エディションのIDを示すパスパラメータです。
     * @param {string} productKeyID プロダクトキーのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postRevokeProductKey(
      editionID: string,
      productKeyID: string,
      options?: any
    ): AxiosPromise<ProductKey> {
      return localVarFp
        .postRevokeProductKey(editionID, productKeyID, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * EditionAuthApi - object-oriented interface
 * @export
 * @class EditionAuthApi
 * @extends {BaseAPI}
 */
export class EditionAuthApi extends BaseAPI {
  /**
   * アクセストークンをもとにエディションの情報を取得します。
   * @summary エディション情報の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionAuthApi
   */
  public getEditionInfo(options?: any) {
    return EditionAuthApiFp(this.configuration)
      .getEditionInfo(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * エディションに対するプロダクトキーの一覧を取得します。
   * @summary プロダクトキーの一覧の取得
   * @param {string} editionID エディションのIDを示すパスパラメータです。
   * @param {ProductKeyStatus} [status] プロダクトキーのステータスを示すクエリパラメータです。 指定がない場合は全てのステータスのプロダクトキーが返されます。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionAuthApi
   */
  public getProductKeys(
    editionID: string,
    status?: ProductKeyStatus,
    options?: any
  ) {
    return EditionAuthApiFp(this.configuration)
      .getProductKeys(editionID, status, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * エディションに対するプロダクトキーを再有効化します。
   * @summary プロダクトキーの再有効化
   * @param {string} editionID エディションのIDを示すパスパラメータです。
   * @param {string} productKeyID プロダクトキーのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionAuthApi
   */
  public postActivateProductKey(
    editionID: string,
    productKeyID: string,
    options?: any
  ) {
    return EditionAuthApiFp(this.configuration)
      .postActivateProductKey(editionID, productKeyID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ランチャーのエディション情報取得の認可リクエストを行います。 リクエストに成功すると、アクセストークンが返されます。 このアクセストークンを用いたBearer認証で、エディション情報取得用のAPIを利用することができます。
   * @summary ランチャーの認可リクエスト
   * @param {EditionAuthorizeRequest} editionAuthorizeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionAuthApi
   */
  public postEditionAuthorize(
    editionAuthorizeRequest: EditionAuthorizeRequest,
    options?: any
  ) {
    return EditionAuthApiFp(this.configuration)
      .postEditionAuthorize(editionAuthorizeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ランチャーからのエディション情報取得の認可用プロダクトキーを生成します。
   * @summary プロダクトキーの生成
   * @param {string} editionID エディションのIDを示すパスパラメータです。
   * @param {number} num 生成するプロダクトキーの数を示すクエリパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionAuthApi
   */
  public postProductKey(editionID: string, num: number, options?: any) {
    return EditionAuthApiFp(this.configuration)
      .postProductKey(editionID, num, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * エディションに対するプロダクトキーを失効(revoke)します。
   * @summary プロダクトキーの失効
   * @param {string} editionID エディションのIDを示すパスパラメータです。
   * @param {string} productKeyID プロダクトキーのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EditionAuthApi
   */
  public postRevokeProductKey(
    editionID: string,
    productKeyID: string,
    options?: any
  ) {
    return EditionAuthApiFp(this.configuration)
      .postRevokeProductKey(editionID, productKeyID, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GameApi - axios parameter creator
 * @export
 */
export const GameApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 指定したゲームIDのゲームを削除します。
     * @summary ゲームの削除
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGame: async (
      gameID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('deleteGame', 'gameID', gameID);
      const localVarPath = `/games/{gameID}`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication GameOwnerAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのゲームの情報を取得します。
     * @summary ゲーム情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGame: async (
      gameID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGame', 'gameID', gameID);
      const localVarPath = `/games/{gameID}`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ゲームの一覧を取得します。 作成時刻での降順で結果が返されます。
     * @summary ゲーム一覧の取得
     * @param {boolean} [all] trueを指定すると、全てのゲーム、 falseを指定すると、ログイン中のユーザーが作成したゲームのみを返します。 デフォルトはtrueです。
     * @param {number} [limit] 取得するゲームの上限数を指定します。 指定なしの場合は制限なしです。
     * @param {number} [offset] 取得するゲームの開始位置を指定します。 指定なしの場合は0となります。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGames: async (
      all?: boolean,
      limit?: number,
      offset?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/games`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      if (all !== undefined) {
        localVarQueryParameter['all'] = all;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのゲームの情報を修正します。
     * @summary ゲームの情報の変更
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {PatchGame} [patchGame]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchGame: async (
      gameID: string,
      patchGame?: PatchGame,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('patchGame', 'gameID', gameID);
      const localVarPath = `/games/{gameID}`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication GameMaintainerAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchGame,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 新しくゲームを追加します。 このエンドポイントを叩いたユーザーは 自動的にownerとなります。
     * @summary ゲームの追加
     * @param {NewGame} [newGame]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGame: async (
      newGame?: NewGame,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/games`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        newGame,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GameApi - functional programming interface
 * @export
 */
export const GameApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GameApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したゲームIDのゲームを削除します。
     * @summary ゲームの削除
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGame(
      gameID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGame(
        gameID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのゲームの情報を取得します。
     * @summary ゲーム情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGame(
      gameID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGame(
        gameID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * ゲームの一覧を取得します。 作成時刻での降順で結果が返されます。
     * @summary ゲーム一覧の取得
     * @param {boolean} [all] trueを指定すると、全てのゲーム、 falseを指定すると、ログイン中のユーザーが作成したゲームのみを返します。 デフォルトはtrueです。
     * @param {number} [limit] 取得するゲームの上限数を指定します。 指定なしの場合は制限なしです。
     * @param {number} [offset] 取得するゲームの開始位置を指定します。 指定なしの場合は0となります。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGames(
      all?: boolean,
      limit?: number,
      offset?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetGamesResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGames(
        all,
        limit,
        offset,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのゲームの情報を修正します。
     * @summary ゲームの情報の変更
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {PatchGame} [patchGame]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchGame(
      gameID: string,
      patchGame?: PatchGame,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameInfo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchGame(
        gameID,
        patchGame,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 新しくゲームを追加します。 このエンドポイントを叩いたユーザーは 自動的にownerとなります。
     * @summary ゲームの追加
     * @param {NewGame} [newGame]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postGame(
      newGame?: NewGame,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postGame(
        newGame,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * GameApi - factory interface
 * @export
 */
export const GameApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GameApiFp(configuration);
  return {
    /**
     * 指定したゲームIDのゲームを削除します。
     * @summary ゲームの削除
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGame(gameID: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteGame(gameID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのゲームの情報を取得します。
     * @summary ゲーム情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGame(gameID: string, options?: any): AxiosPromise<Game> {
      return localVarFp
        .getGame(gameID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ゲームの一覧を取得します。 作成時刻での降順で結果が返されます。
     * @summary ゲーム一覧の取得
     * @param {boolean} [all] trueを指定すると、全てのゲーム、 falseを指定すると、ログイン中のユーザーが作成したゲームのみを返します。 デフォルトはtrueです。
     * @param {number} [limit] 取得するゲームの上限数を指定します。 指定なしの場合は制限なしです。
     * @param {number} [offset] 取得するゲームの開始位置を指定します。 指定なしの場合は0となります。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGames(
      all?: boolean,
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<GetGamesResponse> {
      return localVarFp
        .getGames(all, limit, offset, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのゲームの情報を修正します。
     * @summary ゲームの情報の変更
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {PatchGame} [patchGame]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchGame(
      gameID: string,
      patchGame?: PatchGame,
      options?: any
    ): AxiosPromise<GameInfo> {
      return localVarFp
        .patchGame(gameID, patchGame, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 新しくゲームを追加します。 このエンドポイントを叩いたユーザーは 自動的にownerとなります。
     * @summary ゲームの追加
     * @param {NewGame} [newGame]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGame(newGame?: NewGame, options?: any): AxiosPromise<Game> {
      return localVarFp
        .postGame(newGame, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GameApi - object-oriented interface
 * @export
 * @class GameApi
 * @extends {BaseAPI}
 */
export class GameApi extends BaseAPI {
  /**
   * 指定したゲームIDのゲームを削除します。
   * @summary ゲームの削除
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public deleteGame(gameID: string, options?: any) {
    return GameApiFp(this.configuration)
      .deleteGame(gameID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのゲームの情報を取得します。
   * @summary ゲーム情報の取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public getGame(gameID: string, options?: any) {
    return GameApiFp(this.configuration)
      .getGame(gameID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ゲームの一覧を取得します。 作成時刻での降順で結果が返されます。
   * @summary ゲーム一覧の取得
   * @param {boolean} [all] trueを指定すると、全てのゲーム、 falseを指定すると、ログイン中のユーザーが作成したゲームのみを返します。 デフォルトはtrueです。
   * @param {number} [limit] 取得するゲームの上限数を指定します。 指定なしの場合は制限なしです。
   * @param {number} [offset] 取得するゲームの開始位置を指定します。 指定なしの場合は0となります。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public getGames(
    all?: boolean,
    limit?: number,
    offset?: number,
    options?: any
  ) {
    return GameApiFp(this.configuration)
      .getGames(all, limit, offset, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのゲームの情報を修正します。
   * @summary ゲームの情報の変更
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {PatchGame} [patchGame]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public patchGame(gameID: string, patchGame?: PatchGame, options?: any) {
    return GameApiFp(this.configuration)
      .patchGame(gameID, patchGame, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 新しくゲームを追加します。 このエンドポイントを叩いたユーザーは 自動的にownerとなります。
   * @summary ゲームの追加
   * @param {NewGame} [newGame]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameApi
   */
  public postGame(newGame?: NewGame, options?: any) {
    return GameApiFp(this.configuration)
      .postGame(newGame, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GameFileApi - axios parameter creator
 * @export
 */
export const GameFileApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 指定したゲームファイルIDのゲームファイルを取得します。
     * @summary ゲームファイルのバイナリの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameFileID ゲームのファイルのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameFile: async (
      gameID: string,
      gameFileID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGameFile', 'gameID', gameID);
      // verify required parameter 'gameFileID' is not null or undefined
      assertParamExists('getGameFile', 'gameFileID', gameFileID);
      const localVarPath = `/games/{gameID}/files/{gameFileID}`
        .replace(`{${'gameID'}}`, encodeURIComponent(String(gameID)))
        .replace(`{${'gameFileID'}}`, encodeURIComponent(String(gameFileID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication EditionGameFileAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームファイルIDのゲームファイルを取得します。
     * @summary ゲームファイルのメタ情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameFileID ゲームのファイルのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameFileMeta: async (
      gameID: string,
      gameFileID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGameFileMeta', 'gameID', gameID);
      // verify required parameter 'gameFileID' is not null or undefined
      assertParamExists('getGameFileMeta', 'gameFileID', gameFileID);
      const localVarPath = `/games/{gameID}/files/{gameFileID}/meta`
        .replace(`{${'gameID'}}`, encodeURIComponent(String(gameID)))
        .replace(`{${'gameFileID'}}`, encodeURIComponent(String(gameFileID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication EditionGameFileAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのゲームのアップロード済みファイル一覧を返します。 ゲームバージョンと紐づけられていないファイルも含まれる点に注意。
     * @summary ゲームファイル一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameFiles: async (
      gameID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGameFiles', 'gameID', gameID);
      const localVarPath = `/games/{gameID}/files`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのゲームにファイルを作成します。 作成したゲームファイルは、1日以内にゲームバージョンと紐づけられない場合自動で削除されます。
     * @summary ゲームファイルの作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} type
     * @param {string} entryPoint ゲームファイルの解凍後の実行ファイルのパスです。
     * @param {any} content ゲームの実行ファイルやデータをzipしたバイナリです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGameFile: async (
      gameID: string,
      type: string,
      entryPoint: string,
      content: any,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('postGameFile', 'gameID', gameID);
      // verify required parameter 'type' is not null or undefined
      assertParamExists('postGameFile', 'type', type);
      // verify required parameter 'entryPoint' is not null or undefined
      assertParamExists('postGameFile', 'entryPoint', entryPoint);
      // verify required parameter 'content' is not null or undefined
      assertParamExists('postGameFile', 'content', content);
      const localVarPath = `/games/{gameID}/files`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication GameMaintainerAuth required

      if (type !== undefined) {
        localVarFormParams.append('type', type as any);
      }

      if (entryPoint !== undefined) {
        localVarFormParams.append('entryPoint', entryPoint as any);
      }

      if (content !== undefined) {
        localVarFormParams.append('content', content as any);
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GameFileApi - functional programming interface
 * @export
 */
export const GameFileApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GameFileApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したゲームファイルIDのゲームファイルを取得します。
     * @summary ゲームファイルのバイナリの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameFileID ゲームのファイルのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameFile(
      gameID: string,
      gameFileID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameFile(
        gameID,
        gameFileID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームファイルIDのゲームファイルを取得します。
     * @summary ゲームファイルのメタ情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameFileID ゲームのファイルのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameFileMeta(
      gameID: string,
      gameFileID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameFile>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameFileMeta(
        gameID,
        gameFileID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのゲームのアップロード済みファイル一覧を返します。 ゲームバージョンと紐づけられていないファイルも含まれる点に注意。
     * @summary ゲームファイル一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameFiles(
      gameID: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<GameFile>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameFiles(
        gameID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのゲームにファイルを作成します。 作成したゲームファイルは、1日以内にゲームバージョンと紐づけられない場合自動で削除されます。
     * @summary ゲームファイルの作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} type
     * @param {string} entryPoint ゲームファイルの解凍後の実行ファイルのパスです。
     * @param {any} content ゲームの実行ファイルやデータをzipしたバイナリです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postGameFile(
      gameID: string,
      type: string,
      entryPoint: string,
      content: any,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameFile>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postGameFile(
        gameID,
        type,
        entryPoint,
        content,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * GameFileApi - factory interface
 * @export
 */
export const GameFileApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GameFileApiFp(configuration);
  return {
    /**
     * 指定したゲームファイルIDのゲームファイルを取得します。
     * @summary ゲームファイルのバイナリの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameFileID ゲームのファイルのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameFile(
      gameID: string,
      gameFileID: string,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .getGameFile(gameID, gameFileID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームファイルIDのゲームファイルを取得します。
     * @summary ゲームファイルのメタ情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameFileID ゲームのファイルのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameFileMeta(
      gameID: string,
      gameFileID: string,
      options?: any
    ): AxiosPromise<GameFile> {
      return localVarFp
        .getGameFileMeta(gameID, gameFileID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのゲームのアップロード済みファイル一覧を返します。 ゲームバージョンと紐づけられていないファイルも含まれる点に注意。
     * @summary ゲームファイル一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameFiles(gameID: string, options?: any): AxiosPromise<Array<GameFile>> {
      return localVarFp
        .getGameFiles(gameID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのゲームにファイルを作成します。 作成したゲームファイルは、1日以内にゲームバージョンと紐づけられない場合自動で削除されます。
     * @summary ゲームファイルの作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} type
     * @param {string} entryPoint ゲームファイルの解凍後の実行ファイルのパスです。
     * @param {any} content ゲームの実行ファイルやデータをzipしたバイナリです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGameFile(
      gameID: string,
      type: string,
      entryPoint: string,
      content: any,
      options?: any
    ): AxiosPromise<GameFile> {
      return localVarFp
        .postGameFile(gameID, type, entryPoint, content, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GameFileApi - object-oriented interface
 * @export
 * @class GameFileApi
 * @extends {BaseAPI}
 */
export class GameFileApi extends BaseAPI {
  /**
   * 指定したゲームファイルIDのゲームファイルを取得します。
   * @summary ゲームファイルのバイナリの取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {string} gameFileID ゲームのファイルのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameFileApi
   */
  public getGameFile(gameID: string, gameFileID: string, options?: any) {
    return GameFileApiFp(this.configuration)
      .getGameFile(gameID, gameFileID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームファイルIDのゲームファイルを取得します。
   * @summary ゲームファイルのメタ情報の取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {string} gameFileID ゲームのファイルのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameFileApi
   */
  public getGameFileMeta(gameID: string, gameFileID: string, options?: any) {
    return GameFileApiFp(this.configuration)
      .getGameFileMeta(gameID, gameFileID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのゲームのアップロード済みファイル一覧を返します。 ゲームバージョンと紐づけられていないファイルも含まれる点に注意。
   * @summary ゲームファイル一覧の取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameFileApi
   */
  public getGameFiles(gameID: string, options?: any) {
    return GameFileApiFp(this.configuration)
      .getGameFiles(gameID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのゲームにファイルを作成します。 作成したゲームファイルは、1日以内にゲームバージョンと紐づけられない場合自動で削除されます。
   * @summary ゲームファイルの作成
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {string} type
   * @param {string} entryPoint ゲームファイルの解凍後の実行ファイルのパスです。
   * @param {any} content ゲームの実行ファイルやデータをzipしたバイナリです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameFileApi
   */
  public postGameFile(
    gameID: string,
    type: string,
    entryPoint: string,
    content: any,
    options?: any
  ) {
    return GameFileApiFp(this.configuration)
      .postGameFile(gameID, type, entryPoint, content, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GameImageApi - axios parameter creator
 * @export
 */
export const GameImageApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 指定したゲーム画像IDのゲーム画像を取得します。
     * @summary ゲーム画像のバイナリの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameImageID ゲームの画像のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameImage: async (
      gameID: string,
      gameImageID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGameImage', 'gameID', gameID);
      // verify required parameter 'gameImageID' is not null or undefined
      assertParamExists('getGameImage', 'gameImageID', gameImageID);
      const localVarPath = `/games/{gameID}/images/{gameImageID}`
        .replace(`{${'gameID'}}`, encodeURIComponent(String(gameID)))
        .replace(`{${'gameImageID'}}`, encodeURIComponent(String(gameImageID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication EditionGameImageAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲーム画像IDのゲーム画像のメタ情報を取得します。
     * @summary ゲーム画像のメタ情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameImageID ゲームの画像のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameImageMeta: async (
      gameID: string,
      gameImageID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGameImageMeta', 'gameID', gameID);
      // verify required parameter 'gameImageID' is not null or undefined
      assertParamExists('getGameImageMeta', 'gameImageID', gameImageID);
      const localVarPath = `/games/{gameID}/images/{gameImageID}/meta`
        .replace(`{${'gameID'}}`, encodeURIComponent(String(gameID)))
        .replace(`{${'gameImageID'}}`, encodeURIComponent(String(gameImageID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication EditionGameImageAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのアップロード済みゲーム画像一覧を返します。 ゲームバージョンに紐づけられていないゲーム画像も含まれる点に注意。
     * @summary ゲーム画像一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameImages: async (
      gameID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGameImages', 'gameID', gameID);
      const localVarPath = `/games/{gameID}/images`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのゲームに画像を作成します。 作成したゲーム画像は、1日以内にゲームバージョンと紐づけられない場合に自動で削除されます。
     * @summary ゲーム画像の作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {any} content ゲーム画像のバイナリです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGameImage: async (
      gameID: string,
      content: any,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('postGameImage', 'gameID', gameID);
      // verify required parameter 'content' is not null or undefined
      assertParamExists('postGameImage', 'content', content);
      const localVarPath = `/games/{gameID}/images`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication GameMaintainerAuth required

      if (content !== undefined) {
        localVarFormParams.append('content', content as any);
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GameImageApi - functional programming interface
 * @export
 */
export const GameImageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    GameImageApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したゲーム画像IDのゲーム画像を取得します。
     * @summary ゲーム画像のバイナリの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameImageID ゲームの画像のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameImage(
      gameID: string,
      gameImageID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameImage(
        gameID,
        gameImageID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲーム画像IDのゲーム画像のメタ情報を取得します。
     * @summary ゲーム画像のメタ情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameImageID ゲームの画像のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameImageMeta(
      gameID: string,
      gameImageID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameImage>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getGameImageMeta(
          gameID,
          gameImageID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのアップロード済みゲーム画像一覧を返します。 ゲームバージョンに紐づけられていないゲーム画像も含まれる点に注意。
     * @summary ゲーム画像一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameImages(
      gameID: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<GameImage>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameImages(
        gameID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのゲームに画像を作成します。 作成したゲーム画像は、1日以内にゲームバージョンと紐づけられない場合に自動で削除されます。
     * @summary ゲーム画像の作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {any} content ゲーム画像のバイナリです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postGameImage(
      gameID: string,
      content: any,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameImage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postGameImage(
        gameID,
        content,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * GameImageApi - factory interface
 * @export
 */
export const GameImageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GameImageApiFp(configuration);
  return {
    /**
     * 指定したゲーム画像IDのゲーム画像を取得します。
     * @summary ゲーム画像のバイナリの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameImageID ゲームの画像のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameImage(
      gameID: string,
      gameImageID: string,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .getGameImage(gameID, gameImageID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲーム画像IDのゲーム画像のメタ情報を取得します。
     * @summary ゲーム画像のメタ情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameImageID ゲームの画像のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameImageMeta(
      gameID: string,
      gameImageID: string,
      options?: any
    ): AxiosPromise<GameImage> {
      return localVarFp
        .getGameImageMeta(gameID, gameImageID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのアップロード済みゲーム画像一覧を返します。 ゲームバージョンに紐づけられていないゲーム画像も含まれる点に注意。
     * @summary ゲーム画像一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameImages(
      gameID: string,
      options?: any
    ): AxiosPromise<Array<GameImage>> {
      return localVarFp
        .getGameImages(gameID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのゲームに画像を作成します。 作成したゲーム画像は、1日以内にゲームバージョンと紐づけられない場合に自動で削除されます。
     * @summary ゲーム画像の作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {any} content ゲーム画像のバイナリです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGameImage(
      gameID: string,
      content: any,
      options?: any
    ): AxiosPromise<GameImage> {
      return localVarFp
        .postGameImage(gameID, content, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GameImageApi - object-oriented interface
 * @export
 * @class GameImageApi
 * @extends {BaseAPI}
 */
export class GameImageApi extends BaseAPI {
  /**
   * 指定したゲーム画像IDのゲーム画像を取得します。
   * @summary ゲーム画像のバイナリの取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {string} gameImageID ゲームの画像のIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameImageApi
   */
  public getGameImage(gameID: string, gameImageID: string, options?: any) {
    return GameImageApiFp(this.configuration)
      .getGameImage(gameID, gameImageID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲーム画像IDのゲーム画像のメタ情報を取得します。
   * @summary ゲーム画像のメタ情報の取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {string} gameImageID ゲームの画像のIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameImageApi
   */
  public getGameImageMeta(gameID: string, gameImageID: string, options?: any) {
    return GameImageApiFp(this.configuration)
      .getGameImageMeta(gameID, gameImageID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのアップロード済みゲーム画像一覧を返します。 ゲームバージョンに紐づけられていないゲーム画像も含まれる点に注意。
   * @summary ゲーム画像一覧の取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameImageApi
   */
  public getGameImages(gameID: string, options?: any) {
    return GameImageApiFp(this.configuration)
      .getGameImages(gameID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのゲームに画像を作成します。 作成したゲーム画像は、1日以内にゲームバージョンと紐づけられない場合に自動で削除されます。
   * @summary ゲーム画像の作成
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {any} content ゲーム画像のバイナリです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameImageApi
   */
  public postGameImage(gameID: string, content: any, options?: any) {
    return GameImageApiFp(this.configuration)
      .postGameImage(gameID, content, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GameRoleApi - axios parameter creator
 * @export
 */
export const GameRoleApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 指定したゲームIDのゲームの管理権限を削除します。 ownerは1人以上はいる必要があるため、 削除によりownerがいなくなる場合はエラーとなります。
     * @summary ゲームの管理権限の削除
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} userID ユーザーIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGameRole: async (
      gameID: string,
      userID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('deleteGameRole', 'gameID', gameID);
      // verify required parameter 'userID' is not null or undefined
      assertParamExists('deleteGameRole', 'userID', userID);
      const localVarPath = `/games/{gameID}/roles/{userID}`
        .replace(`{${'gameID'}}`, encodeURIComponent(String(gameID)))
        .replace(`{${'userID'}}`, encodeURIComponent(String(userID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication GameOwnerAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのゲームの管理者を追加します。 既に指定のユーザーが権限(ownerまたはmaintainer)として登録されている場合は、 指定された権限で権限を上書きします。
     * @summary ゲームの管理権限の変更
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {GameRoleRequest} [gameRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchGameRole: async (
      gameID: string,
      gameRoleRequest?: GameRoleRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('patchGameRole', 'gameID', gameID);
      const localVarPath = `/games/{gameID}/roles`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication GameOwnerAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        gameRoleRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GameRoleApi - functional programming interface
 * @export
 */
export const GameRoleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GameRoleApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したゲームIDのゲームの管理権限を削除します。 ownerは1人以上はいる必要があるため、 削除によりownerがいなくなる場合はエラーとなります。
     * @summary ゲームの管理権限の削除
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} userID ユーザーIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGameRole(
      gameID: string,
      userID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGameRole(
        gameID,
        userID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのゲームの管理者を追加します。 既に指定のユーザーが権限(ownerまたはmaintainer)として登録されている場合は、 指定された権限で権限を上書きします。
     * @summary ゲームの管理権限の変更
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {GameRoleRequest} [gameRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchGameRole(
      gameID: string,
      gameRoleRequest?: GameRoleRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchGameRole(
        gameID,
        gameRoleRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * GameRoleApi - factory interface
 * @export
 */
export const GameRoleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GameRoleApiFp(configuration);
  return {
    /**
     * 指定したゲームIDのゲームの管理権限を削除します。 ownerは1人以上はいる必要があるため、 削除によりownerがいなくなる場合はエラーとなります。
     * @summary ゲームの管理権限の削除
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} userID ユーザーIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGameRole(
      gameID: string,
      userID: string,
      options?: any
    ): AxiosPromise<Game> {
      return localVarFp
        .deleteGameRole(gameID, userID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのゲームの管理者を追加します。 既に指定のユーザーが権限(ownerまたはmaintainer)として登録されている場合は、 指定された権限で権限を上書きします。
     * @summary ゲームの管理権限の変更
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {GameRoleRequest} [gameRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchGameRole(
      gameID: string,
      gameRoleRequest?: GameRoleRequest,
      options?: any
    ): AxiosPromise<Game> {
      return localVarFp
        .patchGameRole(gameID, gameRoleRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GameRoleApi - object-oriented interface
 * @export
 * @class GameRoleApi
 * @extends {BaseAPI}
 */
export class GameRoleApi extends BaseAPI {
  /**
   * 指定したゲームIDのゲームの管理権限を削除します。 ownerは1人以上はいる必要があるため、 削除によりownerがいなくなる場合はエラーとなります。
   * @summary ゲームの管理権限の削除
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {string} userID ユーザーIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameRoleApi
   */
  public deleteGameRole(gameID: string, userID: string, options?: any) {
    return GameRoleApiFp(this.configuration)
      .deleteGameRole(gameID, userID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのゲームの管理者を追加します。 既に指定のユーザーが権限(ownerまたはmaintainer)として登録されている場合は、 指定された権限で権限を上書きします。
   * @summary ゲームの管理権限の変更
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {GameRoleRequest} [gameRoleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameRoleApi
   */
  public patchGameRole(
    gameID: string,
    gameRoleRequest?: GameRoleRequest,
    options?: any
  ) {
    return GameRoleApiFp(this.configuration)
      .patchGameRole(gameID, gameRoleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GameVersionApi - axios parameter creator
 * @export
 */
export const GameVersionApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 指定したゲームIDのゲームのバージョン一覧を取得します。 作成時刻での降順で結果が返されます。
     * @summary ゲームバージョン一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {number} [limit] 取得するゲームバージョンの上限数を指定します。 指定なしの場合は制限なしです。
     * @param {number} [offset] 取得するゲームバージョンの開始位置を指定します。 指定なしの場合は0となります。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameVersion: async (
      gameID: string,
      limit?: number,
      offset?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGameVersion', 'gameID', gameID);
      const localVarPath = `/games/{gameID}/versions`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのゲームの最新バージョンを取得します。
     * @summary ゲームの最新バージョンの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestGameVersion: async (
      gameID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getLatestGameVersion', 'gameID', gameID);
      const localVarPath = `/games/{gameID}/versions/latest`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのゲームにバージョンを作成します。
     * @summary ゲームのバージョンの作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {NewGameVersion} [newGameVersion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGameVersion: async (
      gameID: string,
      newGameVersion?: NewGameVersion,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('postGameVersion', 'gameID', gameID);
      const localVarPath = `/games/{gameID}/versions`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication GameMaintainerAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        newGameVersion,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GameVersionApi - functional programming interface
 * @export
 */
export const GameVersionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    GameVersionApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したゲームIDのゲームのバージョン一覧を取得します。 作成時刻での降順で結果が返されます。
     * @summary ゲームバージョン一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {number} [limit] 取得するゲームバージョンの上限数を指定します。 指定なしの場合は制限なしです。
     * @param {number} [offset] 取得するゲームバージョンの開始位置を指定します。 指定なしの場合は0となります。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameVersion(
      gameID: string,
      limit?: number,
      offset?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetGameVersionsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameVersion(
        gameID,
        limit,
        offset,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのゲームの最新バージョンを取得します。
     * @summary ゲームの最新バージョンの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestGameVersion(
      gameID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameVersion>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestGameVersion(gameID, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのゲームにバージョンを作成します。
     * @summary ゲームのバージョンの作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {NewGameVersion} [newGameVersion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postGameVersion(
      gameID: string,
      newGameVersion?: NewGameVersion,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameVersion>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postGameVersion(
        gameID,
        newGameVersion,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * GameVersionApi - factory interface
 * @export
 */
export const GameVersionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GameVersionApiFp(configuration);
  return {
    /**
     * 指定したゲームIDのゲームのバージョン一覧を取得します。 作成時刻での降順で結果が返されます。
     * @summary ゲームバージョン一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {number} [limit] 取得するゲームバージョンの上限数を指定します。 指定なしの場合は制限なしです。
     * @param {number} [offset] 取得するゲームバージョンの開始位置を指定します。 指定なしの場合は0となります。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameVersion(
      gameID: string,
      limit?: number,
      offset?: number,
      options?: any
    ): AxiosPromise<GetGameVersionsResponse> {
      return localVarFp
        .getGameVersion(gameID, limit, offset, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのゲームの最新バージョンを取得します。
     * @summary ゲームの最新バージョンの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestGameVersion(
      gameID: string,
      options?: any
    ): AxiosPromise<GameVersion> {
      return localVarFp
        .getLatestGameVersion(gameID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのゲームにバージョンを作成します。
     * @summary ゲームのバージョンの作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {NewGameVersion} [newGameVersion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGameVersion(
      gameID: string,
      newGameVersion?: NewGameVersion,
      options?: any
    ): AxiosPromise<GameVersion> {
      return localVarFp
        .postGameVersion(gameID, newGameVersion, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GameVersionApi - object-oriented interface
 * @export
 * @class GameVersionApi
 * @extends {BaseAPI}
 */
export class GameVersionApi extends BaseAPI {
  /**
   * 指定したゲームIDのゲームのバージョン一覧を取得します。 作成時刻での降順で結果が返されます。
   * @summary ゲームバージョン一覧の取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {number} [limit] 取得するゲームバージョンの上限数を指定します。 指定なしの場合は制限なしです。
   * @param {number} [offset] 取得するゲームバージョンの開始位置を指定します。 指定なしの場合は0となります。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameVersionApi
   */
  public getGameVersion(
    gameID: string,
    limit?: number,
    offset?: number,
    options?: any
  ) {
    return GameVersionApiFp(this.configuration)
      .getGameVersion(gameID, limit, offset, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのゲームの最新バージョンを取得します。
   * @summary ゲームの最新バージョンの取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameVersionApi
   */
  public getLatestGameVersion(gameID: string, options?: any) {
    return GameVersionApiFp(this.configuration)
      .getLatestGameVersion(gameID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのゲームにバージョンを作成します。
   * @summary ゲームのバージョンの作成
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {NewGameVersion} [newGameVersion]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameVersionApi
   */
  public postGameVersion(
    gameID: string,
    newGameVersion?: NewGameVersion,
    options?: any
  ) {
    return GameVersionApiFp(this.configuration)
      .postGameVersion(gameID, newGameVersion, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GameVideoApi - axios parameter creator
 * @export
 */
export const GameVideoApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 指定したゲーム動画IDのゲーム動画を取得します。
     * @summary ゲーム動画のバイナリの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameVideoID ゲームの動画のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameVideo: async (
      gameID: string,
      gameVideoID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGameVideo', 'gameID', gameID);
      // verify required parameter 'gameVideoID' is not null or undefined
      assertParamExists('getGameVideo', 'gameVideoID', gameVideoID);
      const localVarPath = `/games/{gameID}/videos/{gameVideoID}`
        .replace(`{${'gameID'}}`, encodeURIComponent(String(gameID)))
        .replace(`{${'gameVideoID'}}`, encodeURIComponent(String(gameVideoID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication EditionGameVideoAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲーム動画IDのゲーム動画のメタ情報を取得します。
     * @summary ゲーム動画のメタ情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameVideoID ゲームの動画のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameVideoMeta: async (
      gameID: string,
      gameVideoID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGameVideoMeta', 'gameID', gameID);
      // verify required parameter 'gameVideoID' is not null or undefined
      assertParamExists('getGameVideoMeta', 'gameVideoID', gameVideoID);
      const localVarPath = `/games/{gameID}/videos/{gameVideoID}/meta`
        .replace(`{${'gameID'}}`, encodeURIComponent(String(gameID)))
        .replace(`{${'gameVideoID'}}`, encodeURIComponent(String(gameVideoID)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication EditionGameVideoAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのゲームのアップロード済み動画一覧を取得します。 ゲームバージョンに紐づけられていなくても一覧に含まれる点に注意。
     * @summary ゲーム動画一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameVideos: async (
      gameID: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('getGameVideos', 'gameID', gameID);
      const localVarPath = `/games/{gameID}/videos`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したゲームIDのゲームに動画を作成します。 作成したゲーム動画は、1日以内にゲームバージョンと紐づけられない場合に自動で削除されます。
     * @summary ゲーム動画の作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {any} content ゲーム紹介動画のバイナリです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGameVideo: async (
      gameID: string,
      content: any,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameID' is not null or undefined
      assertParamExists('postGameVideo', 'gameID', gameID);
      // verify required parameter 'content' is not null or undefined
      assertParamExists('postGameVideo', 'content', content);
      const localVarPath = `/games/{gameID}/videos`.replace(
        `{${'gameID'}}`,
        encodeURIComponent(String(gameID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication GameMaintainerAuth required

      if (content !== undefined) {
        localVarFormParams.append('content', content as any);
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GameVideoApi - functional programming interface
 * @export
 */
export const GameVideoApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    GameVideoApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したゲーム動画IDのゲーム動画を取得します。
     * @summary ゲーム動画のバイナリの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameVideoID ゲームの動画のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameVideo(
      gameID: string,
      gameVideoID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameVideo(
        gameID,
        gameVideoID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲーム動画IDのゲーム動画のメタ情報を取得します。
     * @summary ゲーム動画のメタ情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameVideoID ゲームの動画のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameVideoMeta(
      gameID: string,
      gameVideoID: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameVideo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getGameVideoMeta(
          gameID,
          gameVideoID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのゲームのアップロード済み動画一覧を取得します。 ゲームバージョンに紐づけられていなくても一覧に含まれる点に注意。
     * @summary ゲーム動画一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGameVideos(
      gameID: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<GameVideo>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGameVideos(
        gameID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定したゲームIDのゲームに動画を作成します。 作成したゲーム動画は、1日以内にゲームバージョンと紐づけられない場合に自動で削除されます。
     * @summary ゲーム動画の作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {any} content ゲーム紹介動画のバイナリです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postGameVideo(
      gameID: string,
      content: any,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameVideo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postGameVideo(
        gameID,
        content,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * GameVideoApi - factory interface
 * @export
 */
export const GameVideoApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GameVideoApiFp(configuration);
  return {
    /**
     * 指定したゲーム動画IDのゲーム動画を取得します。
     * @summary ゲーム動画のバイナリの取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameVideoID ゲームの動画のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameVideo(
      gameID: string,
      gameVideoID: string,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .getGameVideo(gameID, gameVideoID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲーム動画IDのゲーム動画のメタ情報を取得します。
     * @summary ゲーム動画のメタ情報の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {string} gameVideoID ゲームの動画のIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameVideoMeta(
      gameID: string,
      gameVideoID: string,
      options?: any
    ): AxiosPromise<GameVideo> {
      return localVarFp
        .getGameVideoMeta(gameID, gameVideoID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのゲームのアップロード済み動画一覧を取得します。 ゲームバージョンに紐づけられていなくても一覧に含まれる点に注意。
     * @summary ゲーム動画一覧の取得
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGameVideos(
      gameID: string,
      options?: any
    ): AxiosPromise<Array<GameVideo>> {
      return localVarFp
        .getGameVideos(gameID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したゲームIDのゲームに動画を作成します。 作成したゲーム動画は、1日以内にゲームバージョンと紐づけられない場合に自動で削除されます。
     * @summary ゲーム動画の作成
     * @param {string} gameID ゲームのIDを示すパスパラメータです。
     * @param {any} content ゲーム紹介動画のバイナリです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGameVideo(
      gameID: string,
      content: any,
      options?: any
    ): AxiosPromise<GameVideo> {
      return localVarFp
        .postGameVideo(gameID, content, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GameVideoApi - object-oriented interface
 * @export
 * @class GameVideoApi
 * @extends {BaseAPI}
 */
export class GameVideoApi extends BaseAPI {
  /**
   * 指定したゲーム動画IDのゲーム動画を取得します。
   * @summary ゲーム動画のバイナリの取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {string} gameVideoID ゲームの動画のIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameVideoApi
   */
  public getGameVideo(gameID: string, gameVideoID: string, options?: any) {
    return GameVideoApiFp(this.configuration)
      .getGameVideo(gameID, gameVideoID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲーム動画IDのゲーム動画のメタ情報を取得します。
   * @summary ゲーム動画のメタ情報の取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {string} gameVideoID ゲームの動画のIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameVideoApi
   */
  public getGameVideoMeta(gameID: string, gameVideoID: string, options?: any) {
    return GameVideoApiFp(this.configuration)
      .getGameVideoMeta(gameID, gameVideoID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのゲームのアップロード済み動画一覧を取得します。 ゲームバージョンに紐づけられていなくても一覧に含まれる点に注意。
   * @summary ゲーム動画一覧の取得
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameVideoApi
   */
  public getGameVideos(gameID: string, options?: any) {
    return GameVideoApiFp(this.configuration)
      .getGameVideos(gameID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したゲームIDのゲームに動画を作成します。 作成したゲーム動画は、1日以内にゲームバージョンと紐づけられない場合に自動で削除されます。
   * @summary ゲーム動画の作成
   * @param {string} gameID ゲームのIDを示すパスパラメータです。
   * @param {any} content ゲーム紹介動画のバイナリです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameVideoApi
   */
  public postGameVideo(gameID: string, content: any, options?: any) {
    return GameVideoApiFp(this.configuration)
      .postGameVideo(gameID, content, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * Oauth2Api - axios parameter creator
 * @export
 */
export const Oauth2ApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * traQ上での認証後にtraQから Authorization Codeがクエリパラメーターにつけられて、 リダイレクトされます。
     * @summary traQのOAuth 2.0のコールバック
     * @param {string} code OAuth 2.0のAuthorization Codeです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallback: async (
      code: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'code' is not null or undefined
      assertParamExists('getCallback', 'code', code);
      const localVarPath = `/oauth2/callback`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (code !== undefined) {
        localVarQueryParameter['code'] = code;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * OAuth 2.0を利用しての認証に必要なPKCEのCode Verifierを生成し、 セッションに設定した上でCode ChallengeやClientIDなどを設定したtraQのURLへリダイレクトします。
     * @summary OAuth 2.0のCode Verifierなどのセッションへの設定とtraQへのリダイレクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCode: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/oauth2/code`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * traP Collectionの管理画面からログアウトします。 成功するとセッションが削除されます。
     * @summary traP Collectionの管理画面からのログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLogout: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/oauth2/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * Oauth2Api - functional programming interface
 * @export
 */
export const Oauth2ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = Oauth2ApiAxiosParamCreator(configuration);
  return {
    /**
     * traQ上での認証後にtraQから Authorization Codeがクエリパラメーターにつけられて、 リダイレクトされます。
     * @summary traQのOAuth 2.0のコールバック
     * @param {string} code OAuth 2.0のAuthorization Codeです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCallback(
      code: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCallback(
        code,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * OAuth 2.0を利用しての認証に必要なPKCEのCode Verifierを生成し、 セッションに設定した上でCode ChallengeやClientIDなどを設定したtraQのURLへリダイレクトします。
     * @summary OAuth 2.0のCode Verifierなどのセッションへの設定とtraQへのリダイレクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCode(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCode(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * traP Collectionの管理画面からログアウトします。 成功するとセッションが削除されます。
     * @summary traP Collectionの管理画面からのログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postLogout(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postLogout(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * Oauth2Api - factory interface
 * @export
 */
export const Oauth2ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = Oauth2ApiFp(configuration);
  return {
    /**
     * traQ上での認証後にtraQから Authorization Codeがクエリパラメーターにつけられて、 リダイレクトされます。
     * @summary traQのOAuth 2.0のコールバック
     * @param {string} code OAuth 2.0のAuthorization Codeです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallback(code: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .getCallback(code, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * OAuth 2.0を利用しての認証に必要なPKCEのCode Verifierを生成し、 セッションに設定した上でCode ChallengeやClientIDなどを設定したtraQのURLへリダイレクトします。
     * @summary OAuth 2.0のCode Verifierなどのセッションへの設定とtraQへのリダイレクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCode(options?: any): AxiosPromise<void> {
      return localVarFp
        .getCode(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * traP Collectionの管理画面からログアウトします。 成功するとセッションが削除されます。
     * @summary traP Collectionの管理画面からのログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLogout(options?: any): AxiosPromise<void> {
      return localVarFp
        .postLogout(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Oauth2Api - object-oriented interface
 * @export
 * @class Oauth2Api
 * @extends {BaseAPI}
 */
export class Oauth2Api extends BaseAPI {
  /**
   * traQ上での認証後にtraQから Authorization Codeがクエリパラメーターにつけられて、 リダイレクトされます。
   * @summary traQのOAuth 2.0のコールバック
   * @param {string} code OAuth 2.0のAuthorization Codeです。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public getCallback(code: string, options?: any) {
    return Oauth2ApiFp(this.configuration)
      .getCallback(code, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * OAuth 2.0を利用しての認証に必要なPKCEのCode Verifierを生成し、 セッションに設定した上でCode ChallengeやClientIDなどを設定したtraQのURLへリダイレクトします。
   * @summary OAuth 2.0のCode Verifierなどのセッションへの設定とtraQへのリダイレクト
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public getCode(options?: any) {
    return Oauth2ApiFp(this.configuration)
      .getCode(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * traP Collectionの管理画面からログアウトします。 成功するとセッションが削除されます。
   * @summary traP Collectionの管理画面からのログアウト
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public postLogout(options?: any) {
    return Oauth2ApiFp(this.configuration)
      .postLogout(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SeatApi - axios parameter creator
 * @export
 */
export const SeatApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 座席一覧を取得します。
     * @summary 座席一覧の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSeats: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/seats`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication EditionAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 席の変更を行います。
     * @summary 席の変更
     * @param {number} seatID 席のIDを示すパスパラメータです。
     * @param {PatchSeatStatusRequest} patchSeatStatusRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchSeatStatus: async (
      seatID: number,
      patchSeatStatusRequest: PatchSeatStatusRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'seatID' is not null or undefined
      assertParamExists('patchSeatStatus', 'seatID', seatID);
      // verify required parameter 'patchSeatStatusRequest' is not null or undefined
      assertParamExists(
        'patchSeatStatus',
        'patchSeatStatusRequest',
        patchSeatStatusRequest
      );
      const localVarPath = `/seats/{seatID}`.replace(
        `{${'seatID'}}`,
        encodeURIComponent(String(seatID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication EditionAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication TrapMemberAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchSeatStatusRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 席数を変更します。 既に存在していた席(例:20席から100席への変更ならidが1~20の席、100席から20席ならidが1~20の席)の 着席状態は変更されず、そのまま保持されます。
     * @summary 席数の変更
     * @param {PostSeatRequest} postSeatRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSeat: async (
      postSeatRequest: PostSeatRequest,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postSeatRequest' is not null or undefined
      assertParamExists('postSeat', 'postSeatRequest', postSeatRequest);
      const localVarPath = `/seats`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postSeatRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SeatApi - functional programming interface
 * @export
 */
export const SeatApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SeatApiAxiosParamCreator(configuration);
  return {
    /**
     * 座席一覧を取得します。
     * @summary 座席一覧の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSeats(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Seat>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSeats(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 席の変更を行います。
     * @summary 席の変更
     * @param {number} seatID 席のIDを示すパスパラメータです。
     * @param {PatchSeatStatusRequest} patchSeatStatusRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchSeatStatus(
      seatID: number,
      patchSeatStatusRequest: PatchSeatStatusRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Seat>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchSeatStatus(
        seatID,
        patchSeatStatusRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 席数を変更します。 既に存在していた席(例:20席から100席への変更ならidが1~20の席、100席から20席ならidが1~20の席)の 着席状態は変更されず、そのまま保持されます。
     * @summary 席数の変更
     * @param {PostSeatRequest} postSeatRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postSeat(
      postSeatRequest: PostSeatRequest,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Seat>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postSeat(
        postSeatRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SeatApi - factory interface
 * @export
 */
export const SeatApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SeatApiFp(configuration);
  return {
    /**
     * 座席一覧を取得します。
     * @summary 座席一覧の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSeats(options?: any): AxiosPromise<Array<Seat>> {
      return localVarFp
        .getSeats(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 席の変更を行います。
     * @summary 席の変更
     * @param {number} seatID 席のIDを示すパスパラメータです。
     * @param {PatchSeatStatusRequest} patchSeatStatusRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchSeatStatus(
      seatID: number,
      patchSeatStatusRequest: PatchSeatStatusRequest,
      options?: any
    ): AxiosPromise<Seat> {
      return localVarFp
        .patchSeatStatus(seatID, patchSeatStatusRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 席数を変更します。 既に存在していた席(例:20席から100席への変更ならidが1~20の席、100席から20席ならidが1~20の席)の 着席状態は変更されず、そのまま保持されます。
     * @summary 席数の変更
     * @param {PostSeatRequest} postSeatRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSeat(
      postSeatRequest: PostSeatRequest,
      options?: any
    ): AxiosPromise<Array<Seat>> {
      return localVarFp
        .postSeat(postSeatRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SeatApi - object-oriented interface
 * @export
 * @class SeatApi
 * @extends {BaseAPI}
 */
export class SeatApi extends BaseAPI {
  /**
   * 座席一覧を取得します。
   * @summary 座席一覧の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SeatApi
   */
  public getSeats(options?: any) {
    return SeatApiFp(this.configuration)
      .getSeats(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 席の変更を行います。
   * @summary 席の変更
   * @param {number} seatID 席のIDを示すパスパラメータです。
   * @param {PatchSeatStatusRequest} patchSeatStatusRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SeatApi
   */
  public patchSeatStatus(
    seatID: number,
    patchSeatStatusRequest: PatchSeatStatusRequest,
    options?: any
  ) {
    return SeatApiFp(this.configuration)
      .patchSeatStatus(seatID, patchSeatStatusRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 席数を変更します。 既に存在していた席(例:20席から100席への変更ならidが1~20の席、100席から20席ならidが1~20の席)の 着席状態は変更されず、そのまま保持されます。
   * @summary 席数の変更
   * @param {PostSeatRequest} postSeatRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SeatApi
   */
  public postSeat(postSeatRequest: PostSeatRequest, options?: any) {
    return SeatApiFp(this.configuration)
      .postSeat(postSeatRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * ログイン中のユーザーの情報を取得します。
     * @summary ログイン中ユーザーの情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * traPのアクティブメンバーの一覧を取得します。
     * @summary traPのメンバー一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication TrapMemberAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     * ログイン中のユーザーの情報を取得します。
     * @summary ログイン中ユーザーの情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMe(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * traPのアクティブメンバーの一覧を取得します。
     * @summary traPのメンバー一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUsers(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     * ログイン中のユーザーの情報を取得します。
     * @summary ログイン中ユーザーの情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): AxiosPromise<User> {
      return localVarFp
        .getMe(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * traPのアクティブメンバーの一覧を取得します。
     * @summary traPのメンバー一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): AxiosPromise<Array<User>> {
      return localVarFp
        .getUsers(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   * ログイン中のユーザーの情報を取得します。
   * @summary ログイン中ユーザーの情報の取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getMe(options?: any) {
    return UserApiFp(this.configuration)
      .getMe(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * traPのアクティブメンバーの一覧を取得します。
   * @summary traPのメンバー一覧取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUsers(options?: any) {
    return UserApiFp(this.configuration)
      .getUsers(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
